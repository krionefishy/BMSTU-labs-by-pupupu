# Выполнил: Кошеваров Дмитрий
# Группа: ИУ7-16Б
# Назначени программы:
# Построение треугольника, вычисление его сторон и проверка попадания точки
from math import sqrt
# ВВОД ДАННЫХ Часть 1
a = tuple(map(float, input('Введите поочередно координаты x,y точки A разделив их пробелом ').split()))
b = tuple(map(float, input('Введите поочередно координаты x,y точки B разделив их пробелом ').split()))
c = tuple(map(float, input('Введите поочередно координаты x,y точки C разделив их пробелом ').split()))

# Вычисления сторон треугольника
AB_length = sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2)
AC_length = sqrt((c[0] - a[0]) ** 2 + (c[1] - a[1]) ** 2)
BC_length = sqrt((c[0] - b[0]) ** 2 + (c[1] - b[1]) ** 2)

# Необходимо отсортировать их по возрастанию, чтобы найти наименьший угол
# так как против меньшей стороны лежит меньший угол
# затем по формуле длины биссектрисы вычислить ее

ar = sorted([AB_length, AC_length, BC_length])

# Проверка существования треугольника
if ar[0] + ar[1] <= ar[2]:
    print('Треугольника с такими координатами не существует')
else:
    # Вычисление длины биссектрисы
    bis_length = sqrt(ar[1] * ar[2] * sum(ar) * (sum(ar) - 2*ar[0])) / (ar[1] + ar[2])
    # Проверка на равнобеденность
    rb = len(set(ar)) == 2
    # Вывод первого результата
    if rb:
        print(f'Длина стороны AB: {AB_length:5f} \nДлина стороны AC: {AC_length:5f} \nДлина стороны BC: {BC_length:5f} \
            \nДлина биссектрисы: {bis_length:5f} \nРавноберденный')
    else:
        print(f'Длина стороны AB: {AB_length:5f} \nДлина стороны AC: {AC_length:5f} \nДлина стороны BC: {BC_length:5f} \
            \nДлина биссектрисы: {bis_length:5f} \nНе равноберденный')

    # ВВОД ДАННЫХ Часть 2
    k = tuple(map(float, input('Введите поочередно координаты x,y точки k разделив их пробелом ').split()))
    # Проверка на принадлежность области треугольника и его границам
    p1 = (a[0] - k[0]) * (b[1] - a[1]) - (b[0] - a[0]) * (a[1] - k[1])
    p2 = (b[0] - k[0]) * (c[1] - b[1]) - (c[0] - b[0]) * (b[1] - k[1])
    p3 = (c[0] - k[0]) * (a[1] - c[1]) - (a[0] - c[0]) * (c[1] - k[1])
    if all(j >= 0 for j in [p1, p2, p3]) or all(j <= 0 for j in [p1, p2, p3]):
        # Вычисление расстояний до каждой из сторон и вывод наименьшего результата
        # Расстояние до AB
        k_to_AB = abs((b[1] - a[1]) * k[0] - (b[0] - a[0]) * k[1] + b[0]*a[1] - b[1]*a[0]) / AB_length
        # Расстояние до AC
        k_to_AC = abs((c[1] - a[1]) * k[0] - (c[0] - a[0]) * k[1] + c[0]*a[1] - c[1]*a[0]) / AC_length
        # Расстояние до BC
        k_to_BC = abs((c[1] - b[1]) * k[0] - (c[0] - b[0]) * k[1] + c[0]*b[1] - c[1]*b[0]) / BC_length
        # Вывод второго результата
        print(f'Точка принадлежит области треугольника \
            \nрасстояние до ближайшей стороны треугольника: {min(k_to_AB,k_to_AC,k_to_BC):5f}')
    else:
        print('Точка не принадлежит')
