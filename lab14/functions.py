from colorama import *
import struct
import os 
import validators as v


def menu():
    print(Fore.MAGENTA + "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: \n \
    1) –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ \n \
    2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î \n \
    3) –í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ë–î \n \
    4) –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å \n \
    5) –£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ \n \
    6) –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—é \n \
    7) –ü–æ–∏—Å–∫ –ø–æ –¥–≤—É–º –ø–æ–ª—è–º \n \
    8) –ü–£–ü–£–ü–£ \n ")


def extra_menu():
    print(Fore.MAGENTA + "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: \n\
    1) –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ \n\
    2) –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ \n")


def find_or_create_file(filename: str) -> str:
    default_path = "C:\\Users\\Kdima\\OneDrive\\Desktop\\pycourse\\lab14\\"
    
    if os.path.isabs(filename):
        file_path = filename
    else:
        file_path = os.path.join(default_path, filename)
        
        
    if os.path.exists(file_path):
        return file_path
    else:
        with open(file_path, "wb") as f:
            pass    
        return file_path


def get_strings_from_user(filename: str, n: str):
    exit_code = 0
    
    if v.intValidator(n):
        n = int(n)
    else:
        exit_code = 1
        return exit_code, Fore.RED + f"–Ω–æ—Ä–º —á–∏—Å–ª–∞ –≤–≤–æ–¥–∏–º, –æ–∫–¥–∞?"
    
    
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n \
                name;age:weight: ")
    
    with open(filename, "wb") as file:
        for i in range(n):
            s = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: ")
            name, age, weight = s.split(";") 
            
            if v.strValidator(name):
                name_encoded = name.encode("utf-8")
            else:
                exit_code = 1
                return exit_code, Fore.YELLOW + f"–ë—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ {i+1} —Å—Ç—Ä–æ–∫(–∞), –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
            
            if v.intValidator(age):
                age = int(age)
            else:
                exit_code = 1
                return exit_code, Fore.YELLOW + f"–ë—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ {i+1} —Å—Ç—Ä–æ–∫(–∞), –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
            
            if v.floatValidator(weight):
                weight = float(weight)
            else:
                exit_code = 1
                return exit_code, Fore.YELLOW + f"–ë—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ {i+1} —Å—Ç—Ä–æ–∫(–∞), –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
            
            name_encoded = name_encoded.ljust(32, b'\x00')[:32]
            string = struct.pack('32sif', name_encoded, age, weight)
            file.write(string+b'\n')
            
        return exit_code, Fore.GREEN + "–°—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        

def show_table(filename: str):
    with open(filename, "rb") as binary_file:
        c = 0
        while True:
            data = binary_file.read(41)
            data = data[:-1]
            
            if not data:
                break
            
            name_encoded, age, weight = struct.unpack('32sif', data)
            name = name_encoded.decode('utf-8').rstrip('\x00')
            print(f"{c}:  \n \
        name: {name}; \n \
        age: {age}; \n \
        weight: {round(weight,3)}" )
            c += 1
    return 
            
            
def write_string(filename: str, string: str, n: int):
    if n <= 0:
        return 1, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–Ω–∏–µ n"
    name, age, weight = string.split(";")
            
    if v.strValidator(name):
        name_encoded = name.encode("utf-8")
        name_encoded = name_encoded.ljust(32, b'\x00')[:32]
    else:
        exit_code = 1
        return exit_code, Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                                    
    if v.intValidator(age):
        age = int(age)
    else:
        exit_code = 1
        return exit_code, Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            
    if v.floatValidator(weight):
        weight = float(weight)
    else:
        exit_code = 1
        return exit_code, Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    
    
    exit_code = 0
    with open(filename, "rb") as file:
        lines = 0
        for _ in file:
            lines += 1
            
            
    if n >= lines:
        
        with open(filename, "ab") as file:

            string = struct.pack('20sif', name_encoded, age, weight)
            file.write(string+b'\n')
       
        return exit_code, Fore.GREEN + "–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞"
    
    else:
        position = (n-1)*41
        
        with open(filename, "r+b") as f:
            current_position = 0
            while current_position < position:
                line = f.read(41)  
                if not line:
                    break
                
                current_position += 41

            start_shift_position = f.tell()

            while line:

                next_line = f.read(41)

                f.seek(start_shift_position)
                f.write(line)
                
                start_shift_position += 41
                line = next_line

            f.seek(position)
        
        with open(filename, "r+b") as file:
            file.seek(position)
            string = struct.pack('32sif', name_encoded, age, weight)
            file.write(string + b'\n')                
        
        return exit_code, Fore.GREEN + "–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞"
    
    
def delete_current_line(filename: str, n: str):
    exit_code = 0
    
    if v.intValidator(n):
        n = int(n)
    else:
        exit_code = 1
        return exit_code, Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    
    
    with open(filename, "r+b") as file:
        position = (n-1)*41
        file.seek(0,2)
        file_size = file.tell()
        
        if file_size // 41 < n:
            exit_code = 1
            return exit_code, Fore.YELLOW + "–¢–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –æ–∫, —è –µ–µ —É–¥–∞–ª–∏–ªü§°"
        
        
        while True:
            lower_line = position + 41
            file.seek(lower_line)
            s = file.read(41)
            if not s:
                break 
            file.seek(position)
            file.write(s)
            position = lower_line
        
        
        new_size = file_size - 41
        file.truncate(new_size)
        
    return exit_code, Fore.GREEN + "–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"


def find_by_one_and_show(filename: str, mw: str):
    eps = 1e-5
    
    if v.floatValidator(mw):
        mw = float(mw)
    else:
        print(Fore.RED + f"–°–æ—Ä—è–Ω, –Ω–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –Ω–∞ —Ç–≤–æ–π –≥–æ–≤–Ω–æ-–∑–∞–ø—Ä–æ—Å")
        return 
    
    
    with open(filename, "rb") as binary_file:
        c = 0
        while True:
            data = binary_file.read(41)
            data = data[:-1]
            
            if not data:
                break
            
            name_encoded, age, weight = struct.unpack('32sif', data)
            name = name_encoded.decode('utf-8').rstrip('\x00')
            
            if weight - mw > eps:
                print(f"{c}:  \n \
        name: {name}; \n \
        age: {age}; \n \
        weight: {round(weight,3)}" )
            c += 1
            
            
def find_by_two_and_show(filename: str, mw: str, ma: str):
    eps = 1e-5
    
    if v.floatValidator(mw):
        mw = float(mw)
    else:
        print(Fore.RED + f"–°–æ—Ä—è–Ω, –Ω–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –Ω–∞ —Ç–≤–æ–π –≥–æ–≤–Ω–æ-–∑–∞–ø—Ä–æ—Å")
        return 
    
    
    if v.intValidator(ma):
        ma = float(ma)
    else:
        print(Fore.RED + f"–°–æ—Ä—è–Ω, –Ω–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –Ω–∞ —Ç–≤–æ–π –≥–æ–≤–Ω–æ-–∑–∞–ø—Ä–æ—Å")
        return 
    
    
    with open(filename, "rb") as binary_file:
        c = 0
        while True:
            data = binary_file.read(41)
            data = data[:-1]
            
            if not data:
                break
            name_encoded, age, weight = struct.unpack('32sif', data)
            name = name_encoded.decode('utf-8').rstrip('\x00')
            if (weight - mw > eps) and age > ma:
                print(f"{c}:  \n \
        name: {name}; \n \
        age: {age}; \n \
        weight: {round(weight,3)}" )
            c += 1
            
            
if __name__ == "__main__":
    #find_or_create_file("DB.bin")
    #delete_current_line("lab14/DB.bin", 5)
    #write_string("lab14/DB.bin", "Cris;15;24.5", 7)
    #show_table("lab14/DB.bin")
    #find_by_one_and_show("lab14/DB.bin", 40)
    #find_by_two_and_show("lab14/DB.bin", 70, 30)
    pass