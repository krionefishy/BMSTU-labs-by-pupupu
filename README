Описание работы алгоритма пирамидальной сортировки(heapsort)

Сортировка данных реалиизуется при помощи кучи, конкретнее используется max_heap
max_heap - куча в которой для любого узла i значения его детей больше или равно i

Описание функций использованных в алгоритме:
    left(i) и right(i) создают индексы левого и правого дочерних элементов для i элемента 

    swap(lst, i, j) - меняет местами элементы с соответствующими индексами i, j

    heaplify(lst, i, n, swaps) - 
        Принимает массив, индекс элемента, максимальный размер кучи и счетчик перестановок
        Определяет, является ли i элемент максимальным среди своих дочерних, в противном случае вызывает функцию swap и меняет их местами
        Продолжает процесс рекурсивно, пока не добьется выполнения условия выше

    pop(lst, n, swaps) -
        Принимает массив, размер текущей кучи и счетчик перестановок 
        Извлекает максимальный элемент из кучи и ставит его в конец массива
        Далее вызывает heaplify, для перестройки уменьшенной кучи (без извлеченного элемента)

    heapsort(lst) - 
        Строит кучу для всего массива lst 
        Далее пока в куче есть элементы при помощи pop извлекает их и ставит на правильное место в массиве
        
Основные шаги алгоритма:
    1 Создание кучи
    2 Процесс работы heaplify 
        Начинаем с элемента i, сравниваем его с дочерними
            Если i элемент меньше чем какой то из его дочерних, то меняем их местами 
            Применяем heaplify к новому корневому элементу 
    3 Сортировка
        1 Строим максимальную кучу
        2 Вытаскиваем из нее максимальный элемент, ставим в конец массива
        3 Уменьшаем кучу на 1 элемент
        4 Вызываем heaplify для восстановления уменьшенной кучи
        Повторяем действия 2-4 пока в куче есть элементы


Complexity analisys:
    Time complexity:
        O(n*log(n))
    Space complexity:
        O(1) - extra space

